[tool.poetry]
name = "fastjwt"
version = "0.4.0"
description = "FastAPI Plugin for reusable JWT Authentication Management"
authors = ["Walid BENBIHI <contact@ocarinow.com>"]
homepage = "https://ocarinow.github.io/fastjwt/"
repository = "https://github.com/ocarinow/fastjwt"
keywords = [
    "fastapi",
    "jwt",
    "JSON-Web-Token",
    "authentication",
    "security",
    "api",
]
license = "MIT"
readme = "README.md"
packages = [{ include = "fastjwt/" }]

[tool.poetry.dependencies]
python = ">=3.9"
pydantic = ">=1.10"
pydantic-settings = "^2.2.1"
typing-extensions = "^4.9.0"
pyjwt = { extras = ["crypto"], version = "^2.8.0" }


[tool.poetry.group.dev.dependencies]
black = "^24.2.0"
flake8 = "^7.0.0"
flake8-pyproject = "^1.2.3"
isort = "^5.13.2"
interrogate = "^1.5.0"
pre-commit = "^3.6.2"
pytest = "^8.0.2"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.23.5"
coverage = "^7.4.3"
python-semantic-release = "^9.1.1"
uvicorn = "^0.27.1"
genbadge = { extras = ["all"], version = "^1.1.1" }


[tool.poetry.group.app.dependencies]
fastapi = "^0.110.0"


[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocstrings = { extras = ["python"], version = "^0.24.0" }
mkdocs-material = "^9.5.11"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88

[tool.isort]
profile = "black"
length_sort = true
force_single_line = true

[tool.interrogate]
ignore-init-method = false
ignore-private = false
ignore-module = true
ignore-magic = true
ignore-nested-classes = true
fail-under = 80
quiet = false
verbose = 2

[tool.flake8]
ignore = ["W503"]
max-line-length = 88
max-complexity = 18
per-file-ignores = ["__init__.py:F401"]

[tool.coverage.run]
branch = true
data_file = "reports/.coverage"
source = ['fastjwt']

[tool.coverage.html]
title = "fastjwt coverage report"
directory = "reports/coverage"
show_contexts = true

[tool.coverage.xml]
output = "reports/coverage.xml"

[tool.pytest.ini_options]
addopts = "--junitxml=reports/junit.xml --cov=fastjwt --cov-report=html --cov-report=xml --cov-context=test"
filterwarnings = ["ignore::DeprecationWarning"]

[tool.semantic_release]
tag_format = "v{version}"
build_command = "pip install poetry && poetry build"
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = ["fastjwt/__init__.py:__version__"]
commit_parser = "ci.commitparser:OcarinowCommitParser"
assets = [
    "docs/badges/coverage.svg",
    "docs/badges/flake8.svg",
    "docs/badges/interrogate.svg",
    "docs/badges/pytest.svg",
]

[tool.semantic_release.commit_parser_options]
minor_tags = ["[FEAT]"]
patch_tags = ["[FIX]", "[PERF]"]

[tool.semantic_release.branches.main]
match = "(main|master|release|stable|latest)"

[tool.semantic_release.branches.dev]
match = "(staging|dev|bump.major)"
prerelease = true
prerelease_token = "rc"

# [tool.semantic_release]
# version_variable = ["fastjwt/__init__.py:__version__"]
# version_toml = "pyproject.toml:tool.poetry.version"
# version_source = "commit"
# prerelease_tag = "rc"
# tag_commit = true
# branch = "main"
# upload_to_repository = false
# upload_to_release = true
# commit_parser = "ci.commit_parser.ocarinow_commit_parser"
# build_command = "pip install poetry && poetry build"
# changelog_file = "CHANGELOG.md"
# changelog_placeholder = "<!--next-version-placeholder-->"
# REPOSITORY_USERNAME = "__token__"
# pre_commit_command = "bash ci/pre_commit_command.sh"
# include_additional_files = "reports/flake8-badge.svg,reports/tests-badge.svg,reports/coverage-badge.svg,reports/docstr-badge.svg"
